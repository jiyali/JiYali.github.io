<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ubuntu16.04 google shadowsocks 科学上网配置教程]]></title>
    <url>%2F2019%2F05%2F30%2Fubuntu16-04-google-shadowsocks-%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[最近使用ubuntu系统调试bug的时候，百度问题的时候超级费劲，一怒之下还是安装了google翻墙去国外搜索教程，下面是本次安装的具体过程，尽情食用~ 安装 google chrome 进入 Ubuntu 16.04 桌面，按下 Ctrl + Alt + t 键盘组合键，启动终端。 在终端中，输入sudo wget http://www.linuxidc.com/files/repo/google-chrome.list -P /etc/apt/sources.list.d/ 在终端中，输入 wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add - ,导入谷歌软件的公钥，用于下面步骤中对下载软件进行验证。如果顺利的话，命令将返回“OK”。 在终端中，输入 sudo apt-get update用于对当前系统的可用更新列表进行更新。 在终端中，输入 sudo apt-get install google-chrome-stable ,执行对谷歌 Chrome 浏览器（稳定版）的安装。 最后，如果一切顺利，在终端中执行 /usr/bin/google-chrome-stable ,将会启动谷歌 Chrome 浏览器，它的图标将会出现在屏幕左侧的 Launcher 上，在图标上右键 -&gt; 锁定到启动器，以后就可以简单地单击启动了。 shadowsocks 教程加入PPA源和更新、安装命令 命令行输入以下指令： 123sudo add-apt-repository ppa:hzwhuang/ss-qt5sudo apt-get updatesudo apt-get install shadowsocks-qt5 成功后打开 Dash ，搜索 Shadowscoks 打开后 -&gt; 选择 连接 -&gt; 添加 -&gt; 手动 -&gt; 添加shandowsocks的服务器地址、服务器端口、密钥、加密方式 设置完成后，选择 连接 SwitchyOmega 下载插件，附一下载地址：SwitchyOmega for Chromium &amp; Firefox，选择 SwitchyOmega_Chromium.crx ,点击下载 安装插件：打开chrom浏览器，单机右上角的三个点，选择 更多工具 -&gt; 扩展程序 -&gt; 打开右上角的 开发者模式 开关 -&gt; 将下载的 SwitchyOmega_Chromium.crx 拖拽进来，安装成功 注：安装这个插件的时候我这里出现不能安装甚至按照网上的教程重命名成zip文件解压各种方法都无法安装的问题，这里我的解决办法就是试一下下载低版本的插件哈哈哈哈没想到成功了 配置 SwitchyOmega插件安装成功后，chrom浏览器右上角会出现一个黑圈圈的标志，点击这个黑圈圈，进入 SwitchyOmega选项 选择 新建情景模式 ，随意起一个情景模式名称，选择 代理服务器 修改代理服务器：将 代理协议 修改为 SOCKS5 ,将 代理服务器 修改为 127.0.0.1 ,在下面不代理的地址列表中可以添加不想代理的地址，比如说百度。 点击左侧的 应用选项 保存 这样就可以尽情的在Ubuntu系统下尽情的科学上网啦，另外推荐一个google插件，叫 油猴 巨巨巨巨好用！详细安装教程见此链接 用 Chrome 的人都需要知道的「神器」扩展：「油猴」使用详解]]></content>
  </entry>
  <entry>
    <title><![CDATA[tensorflow + GPU 训练深度学习模型]]></title>
    <url>%2F2019%2F05%2F27%2Ftensorflow-GPU-%E8%AE%AD%E7%BB%83%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[下载tensorflow对应的gpu版本 比如说我要使用的是tensorflow1.10.0，就需要安装1.10.0版本的tensoeflow_gpu 激活自己的环境：source 环境名/bin/activate 安装：pip install -i https://pypi.mirrors.ustc.edu.cn/simple tensorflow_gpu==1.10.0 注：也可以下载.whl文件之后手动安装，pip install tensorflow_gpu-1.10.0-cp35-cp35m-manylinux1_x86_64.whl 问题：在其中出现了各种奇奇怪怪的情况，比如说报错：*** is not a supported wheel on this platform 解决：命令行输入： 12import pip._internalprint(pip._internal.pep425tags.get_supported()) 然后按照里面列出来的命名规范修改名字就可以啦 修改程序 查看当前GPU的使用情况：nvidia-smi tf.device(‘/gpu:2’) import osos.environ[‘CUDA_VISIBLE_DEVICES’]=’2’]]></content>
  </entry>
  <entry>
    <title><![CDATA[使用nohup后台运行python脚本]]></title>
    <url>%2F2019%2F05%2F26%2F%E4%BD%BF%E7%94%A8nolup%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8Cpython%E8%84%9A%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[本地连接服务器训练一个机器学习或者深度学习模型的时候，需要花很长时间才能训练出一个结果，但是在这个过程中本地的ssh连接很容易就断开了，这时在服务器上跑的程序也就跟着断掉了，这个时候就非常非常需要后台运行训练程序。 先记录一下使用nohup解决这个问题的过程 因为服务器多人在使用，所以在进入正题之前还是需要先激活环境：source 环境名/bin/activate 打开程序所在文件夹：cd 某文件夹 接下来进入正题，使用nohup： 在上述步骤结束之后，继续输入： nohup python -u 程序名.py &gt; /日志路径 日志名.log 2&gt;&amp;1 &amp; 验证程序是否已经在后台运行 成功之后，关闭当前终端 打开新的终端，ssh命令连接服务器 输入 ps -aux|grep 程序名.py ，就能看到正在运行的程序啦 训练完毕后杀死进程 在执行 ps -aux|grep 程序名.py 的时候，我们可以看到第二列是程序运行的ID，记下ID号码 命令行输入 kill -9 ID号 ，就可以杀死进程啦 训练完成后想看程序中关于 print 的输出，只要打开自定义的目录文件下的 目录.log 就可以查看啦~]]></content>
  </entry>
  <entry>
    <title><![CDATA[ubuntu常用指令集合(持续更新中✧(≖ ◡ ≖✿)]]></title>
    <url>%2F2019%2F05%2F26%2Fubuntu%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E9%9B%86%E5%90%88%2F</url>
    <content type="text"><![CDATA[文件操作打开及查看文件夹 打开文件夹： cd 文件路径 返回上一目录：cd .. 列出文件夹下的所有文件：ls 查看文件夹下所有文件的具体信息：ls -al 打开及修改文档 vim 输入 i切换到输入模式，以输入字符 跳到文本的最后一行：按“G”,即“shift+g” 跳到最后一行的最后一个字符：先重复1的操作即按“G”，之后按“$”键，即“shift+4”。 跳到第一行的第一个字符：先按两次“g” 跳转到当前行的第一个字符：在当前行按“0”。 保存退出：按左上角的 Esc 按键 -&gt; 输入 :wq 删除文件夹 删除某一个文件 rm 文件名 删除整个文件夹 rm -rf /文件夹路径 (据说这个操作在某些efi机器上还会删除主板固件，造成主板固件丢失从而无法开机(比操作系统无法启动还严重，瑟瑟发抖~) 解压文件 zip文件：unzip 文件名.zip tar文件：tar -xvf 文件名.tar gz文件： gunzip 文件名.gz rar文件：rar x 文件名.rar注：如果要解压到指定目录下，在上述操作之后加上 -C 路径 就可以啦，比如说 unzip 文件名.zip -C /home/jyl 复制文件 cp -参数 源文件或文件夹路径 目标文件夹或文件夹路径 这里的参数有： -a: 该选项通常在复制文件夹时使用。它保留链接、文件属性，并递归地复制文件夹，其作用等于dpR选项的组合。 -d:拷贝时保留链接。 -f:删除已经存在的目标文件而不提示。 -i:和f选项相反，在覆盖目标文件之前将给出提示要求用户确认。回答y时目标文件将被覆盖，是交互式拷贝。 -p:此时cp除复制源文件的内容外，还将把其改动时间和訪问权限也拷贝到新文件里。 -r:若给出的源文件是一文件夹文件，此时cp将递归复制该文件夹下全部的子文件夹和文件。此时目标文件必须为一个文件夹名。 -l:不作拷贝，仅仅是链接文件。注：为防止用户在不经意的情况下用cp命令破坏还有一个文件，如用户指定的目标文件名称已存在，用cp命令复制文件后，这个文件就会被新源文件覆盖，因此，建议用户在使用cp命令复制文件时，最好使用i选项。比如从 /home/download 文件夹下复制 123.text 到 目录 /home/jyl/test 下的指令为 cp -i /home/download/123.text /home/jyl/test 移动与重命名 mv 源文件目录 目标文件目录 以上命令可以将源文件目录下的文件移动到目标文件目录下 mv 修改前的文件名 想要修改成的文件名 以上命令可以给想要修改名字的文件更名 本地复制文件到远程服务器上scp -参数 本地文件或文件夹路径 服务器文件或文件夹路径 这里的参数有： -1： 强制scp命令使用协议ssh1 -2： 强制scp命令使用协议ssh2 -4： 强制scp命令只使用IPv4寻址 -6： 强制scp命令只使用IPv6寻址 -B： 使用批处理模式（传输过程中不询问传输口令或短语） -C： 允许压缩。（将-C标志传递给ssh，从而打开压缩功能） -p： 保留原文件的修改时间，访问时间和访问权限。 -q： 不显示传输进度条。 -r： 递归复制整个目录。 -v： 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。 -c cipher： 以cipher将数据传输进行加密，这个选项将直接传递给ssh。 -F ssh_config： 指定一个替代的ssh配置文件，此参数直接传递给ssh。 -i identity_file： 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。 -l limit： 限定用户所能使用的带宽，以Kbit/s为单位。 -o ssh_option： 如果习惯于使用ssh_config(5)中的参数传递方式。 -P port：注意是大写的P, port是指定数据传输用到的端口号。 -S program： 指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。 以上这些参数其实我也没全用过，满足我正常传文件的需求就使用过 -r ，比如讲本地目录 C:\Users\Administrator\Desktop 下的 test 整个文件夹上传到服务器目录 /home/jyl 下的指令为: scp -r C:\Users\Administrator\Desktop\test 服务器用户名@服务器地址:/home/jyl 注：用 scp 传输大文件不知道为什么在我的操作过程中巨慢!!(这个问题如果后期我整理出了问题所在或者解决办法再来补充)，目前最成功的的解决方法是直接用 BaiduPCS-Goo ，将大文件上传到百度云之后，用此工具直接在ubuntu系统中下载下来，教程也在维的博客中出现过，贴一个链接：linux终端使用百度云的方法–BaiduPCS-Goo 查看进程状态ps 查询指定进程的PID：ps -ef|grep 进程名 查询指定进程名或者PID的占用情况：ps -aux|grep 进程名/PID top top [-参数] 这里的可选参数为: d：指定每两次屏幕信息刷新之间的时间间隔。当然用户可以使用s交互命令来改变之。 p:通过指定监控进程ID来仅仅监控某个进程的状态。 q:该选项将使top没有任何延迟的进行刷新。如果调用程序有超级用户权限，那么top将以尽可能高的优先级运行。 S：指定累计模式 s：使top命令在安全模式中运行。这将去除交互命令所带来的潜在危险。 i：使top不显示任何闲置或者僵死进程。 c:显示整个命令行而不只是显示命令名。 退出：ctrl+c 或者 q其实说实话，直接 top -n 2 这里的 2 代表刷新次数，就可以了，防止top命令卡住最好用的方式哈哈哈 查看占用cpu最高的进程 ps aux|head -1;ps aux|grep -v PID|sort -rn -k +3|head 查看占用内存最高的进程 ps aux|head -1;ps aux|grep -v PID|sort -rn -k +4|head 查看服务器带宽 ifconfig sudo ethtool xxx 暂时能想起来的就这么多啦，后续只要用过的指令会持续更新的！✧(≖ ◡ ≖✿ 参考: linux命令大全]]></content>
  </entry>
  <entry>
    <title><![CDATA[linux终端使用百度云的方法--BaiduPCS-Goo]]></title>
    <url>%2F2019%2F05%2F22%2Flinux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8%E7%99%BE%E5%BA%A6%E4%BA%91%E7%9A%84%E6%96%B9%E6%B3%95-BaiduPCS-Goo%2F</url>
    <content type="text"><![CDATA[今天干了件大事哈哈哈哈哈哈哈哈哈哈！！！连接远程服务器的时候传输大文件确实是一件很麻烦很无聊的事情，关键是浪费嗣干！机智的我用了百度云哈哈哈哈哈哈！！！废话不多说！夸我就是！教程如下： 0.先附一官方文档BaiduPCS-Go 百度网盘客户端 1.运行如下代码下载1wget https://github.com/iikira/BaiduPCS-Go/releases/download/v3.5.6/BaiduPCS-Go-v3.5.6-linux-amd64.zip 2.下载完成后解压1unzip BaiduPCS-Go-v3.5.6-linux-amd64.zip 3.将解压后的文件改名为BaiduPCS-Go:1mv BaiduPCS-Go-v3.5.6-linux-amd64 BaiduPCS-Go 4.打开文件1cd BaiduPCS-Go/ 5.运行1sudo ./BaiduPCS-Go 6.登录12login然后按照各种登录提示操作即可 7.下载1d 百度云上要下载的文件路径 比如说 我要下载我的大文件 feats.npy ，他在我百度云下的路径为那么我要下载这个文件的操作就是 d feats.npy 8.其他操作见 0 中的官方文档喔！]]></content>
  </entry>
  <entry>
    <title><![CDATA[远程服务器使用教程]]></title>
    <url>%2F2019%2F05%2F17%2F%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[服务器上面的配置因为我没有机会亲自配置过，所以这里只对连接和使用服务器的各种步骤进行学习和记录。 首先在服务器上搭建自己的环境，避免安装各种程序需要的包时发生冲突 设置虚拟环境这里可以选择python的版本等，比如说我需要的是python3.5版本的环境，设置步骤如下： 首先去确定服务器上面存在的python版本，在终端运行 cd /usr/bin -&gt; 输入 ls -&gt; 查看是否存在需要的pyhon版本，如果存在，进行下一步，如果不存在，自行百度啦~ 创建 virtualenv -p python35 py35 激活 source py35/bin/activate 安装包 比如pip3 install -i https://pypi.mirrors.ustc.edu.cn/simple tensorflow==1.10.0直接 pip install + 包名 也是可以的 但是会很慢，这里的 https://pypi.mirrors.ustc.edu.cn/simple是使用了国内的镜像，这里列一下国内的一些源： 123456789101112131415清华：https://pypi.tuna.tsinghua.edu.cn/simple阿里云：http://mirrors.aliyun.com/pypi/simple中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple华中理工大学：http://pypi.hustunique.com山东理工大学：http://pypi.sdutlinux.org豆瓣：http://pypi.douban.com/simplenote：新版ubuntu要求使用https源，要注意。使用时直接在命令行输入 &apos;pip -i 源地址&apos; 退出 deactivate Pycharm 2018连接服务器远程调试连接服务器 打开pycharm2018 工具栏找到 Tools--&gt;Deplcyment--&gt;Configuration 点击左上角 + 号添加一个新的配置，选择 SFTP 给新的配置命名 设置 Connection 标签下拉 Advanced，将 Encoding for client-server communication 设置为 UTF-8 问题： 这里的 Private key path定位到私钥所在的位置，但我在配置中出现了问题，在这贴一下，如下图，这里我们需要为私钥转换一个格式 解决方案： 贴一软件的百度云地址 打开软件之后，如下图，选择 Load 选择私钥所在的文件夹，比如说我的是C:\Users\Administrator\.ssh -&gt; 选择 `All File -&gt; 选定 ‘id_rsa’ 输入私钥的密码之后，选择 Load下面的Save private key为新的私钥命名保存后，重新选定就可以啦 设置 Mappings 标签 设置完成后，点下面的 ok 即可。 配置远程解释器 打开 File -&gt; Settings 选择 Project Interpreter 下拉弹窗选择 Show all 创建新的环境，选择 + 号 选择 SSH Interpreter -&gt; 右侧选择 Existing server configuration -&gt; 选择刚才创建的服务器 选择 Move 点击 Next 按照自己配置的路径修改如下内容其中 Sync folder 需要配置两个路径，如下 配置完毕后，选择 Finish，等待完成。 使用服务器跑本地代码 连接服务器 连接成功后，会在下面的窗口弹出下图窗口，首先我们要激活环境 打开要运行的代码的文件，比如说 cd/home/jyl/show_attention_tell 输入 python+要运行的代码，比如 python imagecaption.py，就可以在服务器上跑代码啦~ 另外 正常情况下，按照上述教程，服务器会自动同步本地文件夹下面所有的文件到服务器上面指定的路径下的，但是万一出现什么意外我们也可以用 scp 传输文件。具体指令如下： 1scp -r 本地文件路径 服务器登录名@服务器地址:服务器文件路径 比如说：scp -r C:\Users\Administrator\Desktop\show_attention_tell jyl@xidianqa.com:/home/jyl 这是目前我所有到的所有配置的相关教程，后期如果有什么更牛皮的操作再来补充~参考：Pycharm 2018连接服务器远程调试在ubuntu中使用virtualenv创建python2和python3的虚拟环境]]></content>
      <tags>
        <tag>服务器</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[win10安装cafffe血泪全过程]]></title>
    <url>%2F2019%2F04%2F16%2Fwin10%E5%AE%89%E8%A3%85cafffe%E5%85%A8%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[系统配置12345win10+64位Visual Studio2015python v3.5.2Anaconda3-2019.03-Windows-x86_64cmake version 3.14.2 软件准备Visual Studio2015下载 贴一个Visual Studio官方下载地址，或者直接点击百度网盘下载，提取码：z4u6 安装 VS2015 下载完成后会得到一个镜像文件(.iso 文件)，双击打开，运行 vs_professional.exe 进入安装程序。 选择安装位置以及安装方式安装位置可以自己选择，但是安装方式需要选择 自定义点击 下一步 选择要安装的组件配置caffe的时候需要用到 vcvarsall.bat 文件，所以我们需要选择安装 Visual C++(后期我debug的时候又补充安装了下面的 针对Visual Studio 的 Python 工具(2017年1月) 不知道是否有用，大家还是勾选吧) 剩下的就一路默认就可以啦，等待安装完成 安装完成后点击 启动 点击 以后再说 选择主题后，点击 启动Visual Studio激活 点击菜单栏的 帮助 ，点击 注册产品 点击 使用产品密钥解锁 复制下列激活码：(网上找的)后，点击 应用 1KEY：HMGNV-WCYXV-X7G9W-YCX63-B98R2 注册成功 python3.5下载 附一python官网(https://www.python.org/)，打开后选择 Downloads ，选择合适系统，比如 Windows 选择要下载的python版本，点击进入下拉找到 Files 选择合适系统的安装包，点击下载 安装 双击打开下载好的安装包 python-3.5.2-amd64.exe ，选择 Customize installation ，勾选 Add Python 3.5 to PATH ，下一步 默认不作更改，下一步 在 Customize install location 自定义选择安装路径后，点 install 等待安装完成 anaconda下载 贴anaconda官网(https://www.anaconda.com/)，点击右上角的 Download 下拉选择 Windows ，继续选择 Python3.7 version ，选择核实系统的安装包进行下载，比如我的电脑是64位系统，选择 64-Bit Graphical Installer (662 MB) 安装 双击下载好的安装包 Anaconda3-2019.03-Windows-x86_64.exe ，点击 next 点击 I Agree ，下一步 选择 All Users ，下一步 自定义安装位置 勾选环境变量 等待安装完成即可 配置pyhton3.5环境我们下载好的anaconda默认是python3.7环境的，现在我们需要更改一下python3.5的环境 打开 开始 菜单 -&gt; 找到 Anaconda Powershell Prompt -&gt; 输入命令 conda create --name py35 python=3.5 安装中间会出现 Proceed([y]/n)? -&gt; 输入 y -&gt; 回车 完成安装 cmake下载 贴cmake官网(https://cmake.org/download/) 选择合适版本的安装包进行下载，比如说我下载的是 cmake-3.14.2-win64-x64.zip 安装 找一合适的文件夹解压 cmake-3.14.2-win64-x64.zip 打开解压后的文件夹 cmake-3.14.2-win64-x64 -&gt; bin 复制文件地址，比如我的是 F:\Program Files\cmake-3.14.2-win64-x64\bin 将上述地址添加到环境变量 同时按 WIN + R 键，打开 运行 对话框，输入 sysdm.cpl ，按回车键打开 系统属性 在系统属性对话框中选择 高级 选项卡 选择 Path ，点击 编辑 选择 新建 ，将刚才复制过的地址复制过来就可以啦 记得全部点保存后再退出 打开cmd，输入 cmake --version ，得到 cmake version 3.14.2 后，说明安装成功~ caffe的部分依赖包下载 暂时我就只能贴一百度云下载链接啦，提取码：43mq 使用 在C盘目录下打开 用户 -&gt; 打开 Administrator -&gt; 打开cmd，输入mkdir .caffe 创建一个名为 .caffe 的文件 -&gt; 打开 .caffe 后，新建文件夹 dependencies -&gt; 打开后，新建文件夹 download 将上面下载的 libraries_v140_x64_py35_1.1.0.tar 文件拷贝到刚才新建的文件夹 C:\Users\Administrator\.caffe\dependencies\download 下面 caffe-windows下载 贴上caffe官方github(https://github.com/BVLC/caffe/tree/windows)，可以直接下载 或者在想要安装的文件夹下，右键 Git Bash Here -&gt; 依次输入： 123git clone https://github.com/BVLC/caffe.gitcd caffegit checkout windows 配置 修改 build_win.cmd 打开 caffe -&gt; scripts -&gt; 用notepad++ 打开 build_win.cmd 修改如下内容1234MSVC_VERSION=14 //选用VS2015编译WITH_NINJA=0 //不用NinjaCPU_ONLY=1 //用cuda加速就设置为0，不用就设置为1 PYTHON_VERSION=3 //我用的是python3.5，所以设置为3 注：以上修改内容最好使用 搜索 ，将文件中全部上述内容的进行修改，我之前安装失败就是因为修改时只改了一部分，没有修改全部(不出问题是有两处)( 另外我还改了另一个地方，搜索 set CONDA_ROOT ，将 = 后面改为 Anaconda3 的地址，比如说我的是 F:\ProgramData\Anaconda3 ，这个部分我不确定是不是必须要改，网上说法不一，反正我改掉啦~ ) 修改 WindowsDownloadPrebuiltDependencies.cmake 打开 caffe -&gt; cmake -&gt; 用notepad++ 打开 WindowsDownloadPrebuiltDependencies.cmake 搜索 if(NOT DEFINED DEPENDENCIES_URL_${MSVC_VERSION}_${_pyver}) 在 if(NOT DEFINED DEPENDENCIES_URL_${MSVC_VERSION}_${_pyver}) 上面加一行代码： 1set(MSVC_VERSION 1900) 保存退出 编译 切换环境切记切记！！一定要在编译前切换python的环境！！！打开 cmd -&gt; 输入 activate py35 -&gt; 输入 f -&gt; 输入 cd F:\caffe\scripts 进入正题输入 build_win.cmd 长篇大论之后，大概会出现下面的界面(这一部分我最终的结果和网上不一样，不知道是否编译成功) 曾出现的Bug记录 应该是我太菜鸡，安装过程中Bug层出不穷，前面基本上已经把我之前失误的地方都改过了，我就再说一个比较顽固的bug吧 之前出现 The dependency target &quot;pycaffe&quot; of target &quot;pytest&quot; does not exist 时，搜索了很多类似的问题都没啥解决办法。后来发现可能是环境有问题，环境中没有安装 numpy所以为了避免这个问题出现，我们可以在编译之前， cmd 中输入 python ，加载成功之后 输入 import numpy ，出现下面的界面时，说明我们的环境中有 numpy ，不会出现上述问题 切记，不论出现任何问题，都要把 :\caffe\scripts 目录下的 build 文件彻底删掉才能进行下一轮编译]]></content>
  </entry>
  <entry>
    <title><![CDATA[hexo+next 部署各种炫酷博客特效]]></title>
    <url>%2F2019%2F04%2F15%2Fhexo-next-%E9%83%A8%E7%BD%B2%E5%90%84%E7%A7%8D%E7%82%AB%E9%85%B7%E5%8D%9A%E5%AE%A2%E7%89%B9%E6%95%88%2F</url>
    <content type="text"><![CDATA[在右上角或者左上角实现fork me on github效果图： 实现方法：戳这个链接或这个链接，选择喜欢的图标样式，并复制代码，下面图片红框中右侧的代码： 打开博客主目录文件 -&gt; themes -&gt; next -&gt; layout -&gt; _layout.swig -&gt; 搜索 class=&quot;headband&quot; -&gt; 将刚才复制的代码粘贴在下面 -&gt; 并把 href 改为你的github地址 添加RSS效果图： 实现方法：找到博客主目录文件 -&gt; 右键 Git Bash Here -&gt; 执行 npm install --save hexo-generator-feed -&gt; 安装结束后，打开博客主目录文件 -&gt; 打开 _config.yml -&gt; 在末尾添加代码：123# Extensions## Plugins: http://hexo.io/plugins/plugins: hexo-generate-feed 再打开 themes -&gt; next -&gt; _config.yml -&gt; 搜索 rss -&gt; 在 rss: 后面添加 /atom.xml，,注意在冒号后面要加一个空格 侧边栏社交小图标设置效果图： 实现：打开博客主目录文件 -&gt; themes -&gt; next -&gt; _config.yml -&gt; 搜索 social -&gt; 删掉想要展示的社交账号前面的 # 号，将地址改为自己的地址 -&gt; 找到下面的 social_icons: -&gt; 将 enable 设置为 true -&gt; 在图标库找自己喜欢的小图标，并将名字复制在如下位置，保存即可 主页文章添加阴影效果效果图： 实现：打开博客主目录文件 -&gt; themes -&gt; next -&gt; source -&gt; css -&gt; _custom -&gt; custom.styl -&gt; 在里面粘贴如下代码：1234567.post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125; 页面底部跳动的爱心效果图： 实现： 首先找到图标库，如我现在选择下图中的爱心，那么我要复制的内容就是下图红框中的 fa-heartbeat。打开博客主目录文件 -&gt; themes -&gt; next -&gt; _config.yml -&gt; 搜索 footer -&gt; 将 name 后面的 user 替换成 fa-heartbeat -&gt; 将 animated 设置成 true -&gt; 将 color 修改为 #ff0000 页面访问量统计实现：打开博客主目录文件 -&gt; themes -&gt; next -&gt; _config.yml -&gt; 搜索 busuanzi_count -&gt; 将 enable 设置为 true 添加顶部加载条实现：打开博客主目录文件 -&gt; themes -&gt; next -&gt; layout -&gt; _partials -&gt; head -&gt; head.swig -&gt; 在第四行后面添加如下代码：12&lt;script src=&quot;//cdn.bootcss.com/pace/1.0.2/pace.min.js&quot;&gt;&lt;/script&gt;&lt;link href=&quot;//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css&quot; rel=&quot;stylesheet&quot;&gt; 打开博客主目录文件 -&gt; themes -&gt; next -&gt; _config.yml -&gt; 搜索 pace -&gt; 将 pace 设置为 true默认的颜色是粉红色的。 隐藏网页底部powered By Hexo / 强力驱动实现：打开博客主目录文件 -&gt; themes -&gt; next -&gt; layout -&gt; _partials -&gt; footer.swig -&gt; 搜索 class=&quot;powered-by&quot; -&gt; 使用 &lt;!-- --&gt; 隐藏下图所示代码 为博客添加萌宠效果图： 实现：先给出hexo-helper-live2d 的 Github 链接：https://github.com/EYHN/hexo-helper-live2d 安装并配置 hexo-helper-live2d安装 hexo-helper-live2d 找到博客主目录文件 -&gt; 右键 Git Bash Here -&gt; 执行 npm install hexo-helper-live2d --save 配置 hexo-helper-live2d挑选萌物 到插件作者博客挑选你喜欢的萌物，记录下她的名字~ 安装萌物 比如说我喜欢 koharu，安装 koharu的步骤： 找到博客主目录文件 -&gt; 右键 Git Bash Here -&gt; 执行 npm install live2d-widget-model-koharu --save 配置萌物 打开博客主目录文件 -&gt; _config.yml -&gt; 添加如下代码： 123456789101112131415161718# Live2D## https://github.com/EYHN/hexo-helper-live2dlive2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false debug: false model: use: live2d-widget-model-koharu display: position: right width: 150 height: 300 mobile: show: true 执行 hexo clean -&gt; hexo g -&gt; hexo s ，就能看见我们的萌宠啦~ 浏览页面的时候显示当前浏览进度效果： 实现：打开博客主目录文件 -&gt; themes -&gt; next -&gt; _config.yml -&gt; 搜索 scrollpercent -&gt; 将 scrollpercent 设置为 true 参考：用Live2D让看板喵入住你的Hexo博客吧(^o^)/~hexo的next主题个性化教程:打造炫酷网站]]></content>
  </entry>
  <entry>
    <title><![CDATA[使用VSCode写博客ヾ(◍°∇°◍)ﾉﾞ]]></title>
    <url>%2F2019%2F04%2F14%2F%E4%BD%BF%E7%94%A8VSCode%E5%86%99%E5%8D%9A%E5%AE%A2%E3%83%BE-%E2%97%8D%C2%B0%E2%88%87%C2%B0%E2%97%8D-%EF%BE%89%EF%BE%9E%2F</url>
    <content type="text"><![CDATA[安装VSCode和markdownlint安装VSCode 先贴一Visual Studio Code官网(https://code.visualstudio.com/) 打开是如下界面 点击红框下面的下拉箭头，选择适合系统的安装文件，点击下载，下载完成后运行 VSCodeUserSetup-x64-1.33.1.exe 如果没有什么特殊要求就一路默认安装即可。 安装markdownlint 打开VSCode，在下图所示位置输入 markdownlint 点击进入，出现下述界面 点击红框中的 install 安装结束~ 撰写新的文章新建一篇文章找到博客主目录文件，右键选择 Git Bash Here，输入如下命令1hexo new post &quot;文章的名字&quot; 找到文章路径打开 博客主目录文件 -&gt; source -&gt; _posts -&gt; 你文章的名字右键选择 打开方式 ，选择 Visual Studio Code ，打开页面如下： markdown 的基本语法markdown 的语法大部分都非常简单，一般来说，稍微看一看都能迅速写出文章。吹爆！至于绘制公式等复杂的用法，以后用到会来更新~ 标题语法标题语法是这样的： 第一级标题，开头是一个# 第二级标题，开头是两个## 第三级标题，开头是两个### …… 请注意，标题需要独自占据一行，并且在标题的文字和 # 之间需要有一个空格，不然可能会不被识别。同时，markdown只支持六级标题，六级以上的标题不存在鸭~ 12345678910# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题####### h7 // 错误代码######## h8 // 错误代码######### h9 // 错误代码########## h10 // 错误代码 字体语法加粗 要加粗的文字左右分别用两个*号包起来 比如： 1**加粗以后我就是最靓的仔** 效果： 加粗以后我就是最靓的仔 斜体 要倾斜的文字左右分别用一个*号包起来 比如： 1*整条街就我最横* 效果： 整条街就我最横 斜体加粗 要倾斜和加粗的文字左右分别用三个*号包起来 比如： 1***我又靓又横我最牛批*** 效果： 我又靓又横我最牛批 删除线 要加删除线的文字左右分别用两个~~号包起来 比如： 1~~WTF!当我没说这句话~~ 效果： WTF!当我没说这句话 引用语法引用需要的一个特殊符号是 &gt;，使用方法依旧很简单，只需要在引用的行首加上 &gt; 就可以啦！多行引用就在连续的每一行之前都加上 &gt; 比如说123&gt; 爱的魔力转圈圈，想你想到心花怒放黑夜白天&gt; 可是我害怕爱情只是一瞬间，转眼会不见 &gt; 我要慢慢冒险 上面的markdown效果就是: 爱的魔力转圈圈，想你想到心花怒放黑夜白天可是我害怕爱情只是一瞬间，转眼会不见我要慢慢冒险 代码标记语法感觉会来捣腾这样一个博客的，基本都会和程序员搭上点边？？？那么，在自己的文章中把代码高亮出来的这种操作一定也是非常常用啦！在这里，和大家分享三种标记代码的方式：行内代码标记高亮代码块标记。 行内代码标记行内的标记语法 需要通过两个 ` 把需要被标记的内容包起来，注意，这个符号就是键盘上在数字 1 左边的那个符号。 比如： 1爱的魔力转圈圈 `爱的魔力转圈圈` 爱的魔力转圈圈 效果：爱的魔力转圈圈 爱的魔力转圈圈 爱的魔力转圈圈 高亮代码块这种代码标记的方式可以显示行号，并且可以根据你指定的代码语言对代码进行高亮。为了使用这种标记方式，我们需要在代码块的上方和下方各添加一个以三个反引号开头的行，这个符号也是键盘上数字 1 左侧的符号。在开头行的三个反引号后写上代码所使用的语言即可对代码块进行语法高亮(彩色)。不加的话显示为黑白效果。 比如 12345678这里有三个反引号Javavar executeSync = function()&#123; var args = Array.prototype.slice.call(arguments); if (typeof args[0] === &apos;function&apos;)&#123; args[0].apply(null, args.splice(1)); &#125;&#125;;这里有三个反引号 效果： 123456var executeSync = function()&#123; var args = Array.prototype.slice.call(arguments); if (typeof args[0] === 'function')&#123; args[0].apply(null, args.splice(1)); &#125;&#125;; 列表语法在我们需要按条列举一些内容时，我们可以使用两种方式来展示。 第一种是直接使用 [数字].[空格][内容] 的方式实现 比如： 12341. 爱的魔力转圈圈2. 想你想到心花怒放黑夜白天3. 可是我害怕爱情只是一瞬间4. 转眼会不见，我要慢慢冒险 效果： 爱的魔力转圈圈 想你想到心花怒放黑夜白天 可是我害怕爱情只是一瞬间 转眼会不见，我要慢慢冒险 第二种是用 * 代替数字，使用 [*][空格][内容]的方式实现 比如： 1234* 爱的魔力转圈圈* 想你想到心花怒放黑夜白天* 可是我害怕爱情只是一瞬间* 转眼会不见，我要慢慢冒险 效果： 爱的魔力转圈圈 想你想到心花怒放黑夜白天 可是我害怕爱情只是一瞬间 转眼会不见，我要慢慢冒险 链接语法生成链接的markdown语法有两种，一种是内联式，一种是引用式。 内联式内联式的链接由连续的一对中括号和一对小括号组成，中括号里的内容是链接显示出来的文字，小括号里的内容是链接的地址，写法为 [你想要展示给大家的链接的名称](链接地址) 比如: 1[这是一个小仙女的碎碎念博客](https://jiyali.github.io/) 效果：这是一个小仙女的碎碎念博客 此外，如果想要跳转到同一页面的某个标题处，只需要将链接的位置的内容修改为井号并加上标题名称即可，写法为：[你想要的展示给大家的链接的名称](#本页面的标题名称) 比如： 1[我来教大家怎么写标题~](#标题语法) 效果：我来教大家怎么写标题~点击上面的链接就调到了标题语法的章节，有木有很方便~ 引用式写论文的时候会用到各种引用，在markdown中也有非常方便的引用式的链接，写法为：[空格][你想要展示给大家的链接名称][链接的标号][空格]，然后在任意位置写引用标签，写法为：[刚才的链接的标号]：链接地址。 比如： 12在这里我们将要引用一篇论文，论文题目为 [《Show and Tell: A Neural Image Caption Generator》][1] [1]:https://arxiv.org/pdf/1411.4555.pdf 效果：在这里我们将要引用一篇论文，论文题目为 《Show and Tell: A Neural Image Caption Generator》 插入图片语法配置文件打开博客主目录文件 -&gt; _config.yml -&gt; 搜索post_asset_folder 选项 -&gt; 设置为 true 安装图片插件找到博客主目录文件 -&gt; 右键 Git Bash Here -&gt; 执行 npm install hexo-asset-image --save -&gt; 等待安装完成 生成新的博文找到博客主目录文件 -&gt; 右键 Git Bash Here -&gt; 执行 hexo new post &#39;文章题目&#39; ，就可以看到/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹，而我们文章中需要引用的图片会放在这个文件夹下面~ 语法向文中插入图片的方式和链接是十分类似的，只需要在链接语法前加上一个 ! 即可，其中，中括号中的内容是鼠标移到图片上时显示的描述。写法： ![你想要展示给大家的图片的名称](保存时图片的名称比如&#39;hhh.png&#39;) 比如：1![老哥这波稳](timg.jpg) 效果： 酱~然后就是hexo三联，提交就能看见我们的博客啦:hexo cleanhexo ghexo s是不是不那么乱七八糟啦~基本上实现小学生水平的图文并茂~ 参考：学会写作和你的Hexo博客一起愉快地玩耍吧hexo生成博文插入图片markdown作者的英文文档附带markdown作者的中文文档学会看技术文档是个好习惯！(ง •_•)ง]]></content>
  </entry>
  <entry>
    <title><![CDATA[使用Valine.js添加留言板功能]]></title>
    <url>%2F2019%2F04%2F14%2F%E4%BD%BF%E7%94%A8Valine-js%E6%B7%BB%E5%8A%A0%E7%95%99%E8%A8%80%E6%9D%BF%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[本文配置Valine 是基于Next主题的，相对来说更简单一些，如果不是使用Next主题，这里提供Valine官方文档给大家参阅。 LeanCloud 基本应用创建先来一条官网链接LeanCloud(https://leancloud.cn/) 注册LeanCloudLeanCloud注册链接注册结束，登录 创建应用登陆之后会出现下图所示的一个界面，点击红框中的创建应用然后在弹出框中随意填写一个名字，使用免费的开发版即可~创建结束后出现如下所示界面 获取应用Key点击上图的这个窗口进入应用界面。点击左侧的”设置”和中间的”应用Key”保存最右侧的App ID和App Key，将其复制下来以供接下来的配置使用。 配置安全域名现在这个状态，任何人都可以访问我们的资源，这样就有可能会导致资源的泄露，所以我们需要配置安全域名，只有在白名单中的域名才可以使用我们的资源。仍然是在刚才的设置页面，点击当中红框的“安全中心”，在最右侧红框“Web 安全域名”中根据提示填写我们站点的域名后点击保存即可。 配置 Next 主题中的 Valine 评论功能将评论功能添加到博客中打开博客主目录文件-&gt; themes 文件夹-&gt; next -&gt; _config.yml打开 _config.yml 文件后搜索 # Valine 字段，我们可以看到如下内容：12345678910111213# Valine.# You can get your appid and appkey from https://leancloud.cn# more info please open https://valine.js.orgvaline: enable: false # When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version. appid: # your leancloud application appid appkey: # your leancloud application appkey notify: flase # mail notifier, See: https://github.com/xCss/Valine/wiki verify: flase # Verification code placeholder: Just go go # comment box placeholder avatar: mm # gravatar style guest_info: nick,mail,link # custom comment header pageSize: 10 # pagination size 我们将刚刚获得的 App ID 和 App Key 分别填写到 appid 和 appkey 这两个字段的冒号后面。并且将 enable 修改为 true 。 刷新博客的文章页面，评论功能就出现啦~ 参考链接：使用Valine.js评论系统让游客们到你的Hexo博客留个脚印吧]]></content>
  </entry>
  <entry>
    <title><![CDATA[使用Github+hexo+next搭建个人博客的全过程]]></title>
    <url>%2F2019%2F04%2F14%2F%E4%BD%BF%E7%94%A8Github-hexo-next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%85%A8%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[搭建过程本次搭建Hexo使用的本地环境如下： Windows 10 node v10.15.3 -x64 git version2.20.1.windows.1 hexo v3.8.0 next v6.0.0 准备软件的安装Node.js 打开Node.js官网(http://nodejs.org)，我们就能看见如下的安装界面： 点击左面的按钮(10.15.3LTS)，下载 node-v10.15.3-x64.msi 安装文件。 下载完成后，打开 node-v10.15.3-x64.msi 进行安装。 除非你要修改安装路径或者有什么特殊的需求，否则一路默认安装即可。 安装完成后，打开cmd，输入 node -v ，若为以下类似的输出，则安装成功。 12C:\Users\Administrator&gt;node -vv10.15.3 Git 打开Git官网(https://git-scm.com/downloads)，我们就能看见如下安装界面： 选择适用系统(比如windows)，点击进入后 选择图中红框内的链接，下载 Git-2.21.0-64-bit.exe 安装文件。 下载完成后，打开 Git-2.21.0-64-bit.exe 进行安装。 安装完成后，打开cmd，输入 git --version ，若为以下类似的输出，则安装成功。 12C:\Users\Administrator&gt;git --versiongit version 2.20.1.windows.1 github注册 点击github官网(https://github.com/) 这里的 Username 慎重考虑喔！因为个人网站的固定格式就是：username.github.io 创建Repository 登录github之后，点击右上角的 + 号，选择New repository 创建一个与你的博客相关的Repository项目进行管理，之后所有你博客的动态都会在这Repository更新。Repository的名字是username.github.io，比如我的JiYali.github.io已经创建。其余可以先不填，点击Create repository 配置和使用github 开始—所有应用—找到git bash 配置SSH Keys SSH Keys用来使本地git项目与GitHub联系，这样能在GitHub上的博客项目是最新更新的。 检查SSH Key的设置首先检查自己电脑上现有的SSH Key: 1cd ~/.ssh 如果显示下图信息，则说明这是你第一次使用git 生成新的SSH Key: 123ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot;Generating public/private rsa key pair.Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt; 这里的邮箱地址，输入注册github的邮箱地址然后系统会要你输入密码 12Enter passphrase (empty for no passphrase):&lt;设置密码&gt;Enter same passphrase again:&lt;再次输入密码&gt; 再回车，这里会提示你输入一个密码，作为你提交项目时使用。这个密码的作用就是在个人网站里所有的改动只能经过你的手，也可以不设置密码，直接为空。注意：输入密码的时候没有输入痕迹的，不要以为什么也没有输入。最后看到类似于这样的界面，就成功设置ssh key了： 添加SSH Key到github上在本地文件夹找到id_rsa.pub文件。看上面图片中的第四行的位置就告诉你保存在哪里了。默认为C:\Users\Administrator\.ssh。没找到的话勾选一下文 件扩展名和隐藏的项目。.ssh文件夹里记事本打开这个文件复制全部内容到github相应位置回到你的GitHub主页，右上角点击头像选中Setting继续选中左边菜单栏的SSH and GPG keysTitle最好写，随便写。网上有说不写title也有可能后期出现乱七八糟的错误Key部分就是放刚才复制的内容了，点击Add SSH key 测试回到git bash 框里输入以下代码，不要改任何一个字！！！ 1$ ssh -T git@github.com 回车，看到如下： 123The authenticity of host &apos;github.com (52.74.223.119)&apos; can&apos;t be established.RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.Are you sure you want to continue connecting (yes/no)? 输入yes回车 1Enter passphrase for key &apos;/c/Users/Administrator/.ssh/id_rsa&apos;: 输入刚才设置的密码回车，看到“You’ve successfully authenticated…”成功！下一步！ 输入用户信息现在已经成功通过SSH链接到github啦，我们需要完善一下个人信息： 12$ git config --global user.name &quot;username&quot; //输入注册时的username$ git config --global user.email &quot;注册的邮箱地址&quot; //填写注册邮箱 到此，SSH Key配置结束啦！你的电脑已成功连接到 github。 Hexo开始菜单中打开git bash，利用npm命令安装hexo1npm install -g hexo 请耐心稍等一会儿，如果在安装过程中头部出现 WARN ，可能是因为某些内容不支持 Windows，请不要担心，并不影响实际使用。 (在我写教程的时候安装hexo死活就是出错，尝试了npm config set registry https://registry.npm.taobao.org再输入npm install -g hexo后才安装正常，可以做个小参考，如果没用，请自行百度解决~) 在安装完成后，输入hexo -v，若出现类似以下内容，则 Hexo 已经安装成功。12345678910111213141516hexo-cli: 1.1.0os: Windows_NT 10.0.17763 win32 x64http_parser: 2.8.0node: 10.15.3v8: 6.8.275.32-node.51uv: 1.23.2zlib: 1.2.11ares: 1.15.0modules: 64nghttp2: 1.34.0napi: 3openssl: 1.1.0jicu: 62.1unicode: 11.0cldr: 33.1tz: 2018e 搭建hexo博客创建博客主目录在本地创建一个与 Repository中博客项目同名的文件夹username.github.io(如D:/JiYali.github.io) 初始化hexo主目录在文件夹上点击鼠标右键，选择 Git bash here，输入如下命令：1$ hexo init 安装依赖包 1$ npm install 确保git部署 1$ npm install hexo-deployer-git --save 本地查看 12$ hexo g$ hexo s 打开浏览器，在地址输入http://localhost:4000 ，我们就可以看到激动人心的界面啦！至此hexo博客就真的已经简！单！的！搭！建！完！成！了！✿✿ヽ(°▽°)ノ✿ 使用next主题我想说next这个主题真的是超简单方面，之前尝试了几个主题配置方面都是贼麻烦，所以最终还是随大流选择了next，emmmm..完全是发现了新！大！陆！(✪ω✪) 克隆主题在博客主目录文件上点击鼠标右键，选择 Git bash here，输入如下命令：1$ git clone https://github.com/theme-next/hexo-theme-next themes/next 启用next主题我们在博客主目录文件夹下可以看到有一个名为 _config.yml 的配置文件，我们用编辑器打开它，搜索 theme，我们可以找到以下内容：1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: landscape 我们要将其中的 landscape 修改为我们要是用的 next，修改完如下所示：1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next 查看已启用的主题我们在 Git Bash 依次输入下方三条命令：123$ hexo clean$ hexo g$ hexo s 就可以看到如下界面啦 将博客部署到uesrname.github.io复制SSH码进入 Github 个人主页中的 Repository，复制新建的独立博客项目username.github.io的 SSH码 编辑整站配置文件打开博客主目录文件夹下的 _config.yml ，用编辑器打开它，搜索 deploy，把刚刚复制的 SSH码粘贴到repository：后面，别忘了冒号后要空一格。1234deploy: type: git repository: git@github.com:jiyali/JiYali.github.io.git branch: master 执行下列指令即可完成部署Git Bash 依次输入下方命令：1234$ hexo clean$ hexo g$ hexo s$ hexo d 【提示】如果在配置 SSH key 时设置了密码，执行 hexo d 命令上传文件时需要输入密码进行确认输入密码之后在浏览器输入：username.github.ioSurprise🎉！恭喜你~现在你已经拥有自己的一个小空间啦~ 参考链接:如何搭建自己的个人网站（上）基于Hexo+Coding+Github搭建个人博客的全过程 我的文章将持续更新在我的 https://jiyali.github.io/ 里任何疑问请在下方留言，也将在下一期教如何制作留言板和写博客等内容~敬请期待~❤]]></content>
  </entry>
</search>
