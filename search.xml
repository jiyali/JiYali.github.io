<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[远程服务器使用教程]]></title>
    <url>%2F2019%2F05%2F17%2F%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[服务器上面的配置因为我没有机会亲自配置过，所以这里只对连接和使用服务器的各种步骤进行学习和记录。 首先在服务器上搭建自己的环境，避免安装各种程序需要的包时发生冲突 设置虚拟环境这里可以选择python的版本等，比如说我需要的是python3.5版本的环境，设置步骤如下： 首先去确定服务器上面存在的python版本，在终端运行 cd /usr/bin -&gt; 输入 ls -&gt; 查看是否存在需要的pyhon版本，如果存在，进行下一步，如果不存在，自行百度啦~ 创建 virtualenv -p python35 py35 激活 source py35/bin/activate 安装包 比如pip3 install -i https://pypi.mirrors.ustc.edu.cn/simple tensorflow==1.10.0直接 pip install + 包名 也是可以的 但是会很慢，这里的 https://pypi.mirrors.ustc.edu.cn/simple是使用了国内的镜像，这里列一下国内的一些源： 123456789101112131415清华：https://pypi.tuna.tsinghua.edu.cn/simple阿里云：http://mirrors.aliyun.com/pypi/simple/中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/华中理工大学：http://pypi.hustunique.com/山东理工大学：http://pypi.sdutlinux.org/ 豆瓣：http://pypi.douban.com/simple/note：新版ubuntu要求使用https源，要注意。使用时直接在命令行输入 &apos;pip -i 源地址&apos; 退出 deactivate Pycharm 2018连接服务器远程调试连接服务器 打开pycharm2018 工具栏找到 Tools--&gt;Deplcyment--&gt;Configuration 点击左上角 + 号添加一个新的配置，选择 SFTP 给新的配置命名 设置 Connection 标签下拉 Advanced，将 Encoding for client-server communication 设置为 UTF-8 问题： 这里的 Private key path定位到私钥所在的位置，但我在配置中出现了问题，在这贴一下，如下图，这里我们需要为私钥转换一个格式 解决方案： 贴一软件的百度云地址 打开软件之后，如下图，选择 Load 选择私钥所在的文件夹，比如说我的是C:\Users\Administrator\.ssh -&gt; 选择 `All File -&gt; 选定 ‘id_rsa’ 输入私钥的密码之后，选择 Load下面的Save private key为新的私钥命名保存后，重新选定就可以啦 设置 Mappings 标签 设置完成后，点下面的 ok 即可。 配置远程解释器 打开 File -&gt; Settings 选择 Project Interpreter 下拉弹窗选择 Show all 创建新的环境，选择 + 号 选择 SSH Interpreter -&gt; 右侧选择 Existing server configuration -&gt; 选择刚才创建的服务器 选择 Move 点击 Next 按照自己配置的路径修改如下内容其中 Sync folder 需要配置两个路径，如下 配置完毕后，选择 Finish，等待完成。 使用服务器跑本地代码 连接服务器 连接成功后，会在下面的窗口弹出下图窗口，首先我们要激活环境 打开要运行的代码的文件，比如说 cd/home/jyl/show_attention_tell 输入 python+要运行的代码，比如 python imagecaption.py，就可以在服务器上跑代码啦~ 另外 正常情况下，按照上述教程，服务器会自动同步本地文件夹下面所有的文件到服务器上面指定的路径下的，但是万一出现什么意外我们也可以用 scp 传输文件。具体指令如下： 1scp -r 本地文件路径 服务器登录名@服务器地址:服务器文件路径 比如说：scp -r C:\Users\Administrator\Desktop\show_attention_tell jyl@xidianqa.com:/home/jyl 这是目前我所有到的所有配置的相关教程，后期如果有什么更牛皮的操作再来补充~参考：Pycharm 2018连接服务器远程调试在ubuntu中使用virtualenv创建python2和python3的虚拟环境]]></content>
  </entry>
  <entry>
    <title><![CDATA[ubuntu16.4+python+cpu caffe编译全过程]]></title>
    <url>%2F2019%2F04%2F22%2Fubuntu16-4-python-cpu-caffe%E7%BC%96%E8%AF%91%E5%85%A8%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[系统配置12ubuntu16.04python v3.5.2 继上次在win10下安装了caffe后，因为没有服务器的原因又重新尝试在ubuntu下进行编译，结果发现caffe不只是在win10系统下不友好，在ubuntu环境下也不是非常有友好，在编译通过之后，含泪写下此文，引以为戒.但是网上很多人说每个linux的环境都会不同，所以不一定有效…不一定..有效…hhh 因为第一次详细接触ubuntu，很多概念或描述并不是很准确，还望包涵指正 开始~ 注意！！系统最好先不要安装anaconda！！ 至于是不是因为这个原因我也不太清楚，但是确实很多资料显示在安装anaconda之后会出现各种麻烦的情况，在我第一天编译的时候也是因为安装了anaconda导致各种形形色色的bug。所以如果是新手还是选择先将anaconda卸载之后在进行下一步。 卸载完全完全不会影响之后的安装的！ 首先打开anaconda的安装路径比如我的就是 cd /home/jiyali 执行指令 sudo rm -rf anaconda3 到根目录下，打开终端并输入 sudo gedit ~/.bashrc 拉倒最底下，将类似于如下代码全部删掉(网上很多教程是注释掉\export PATH=&quot;/home/vision/Softwares/Anaconda3/bin:$PATH&quot;，但是打开命令行总会提醒行130:未预期的符号&#39;fi&#39;附近有语法错误，鉴于强迫症就给全删掉了~) 12345678910111213141516# added by Anaconda3 5.3.1 installer# &gt;&gt;&gt; conda init &gt;&gt;&gt;# !! Contents within this block are managed by &apos;conda init&apos; !!__conda_setup=&quot;$(CONDA_REPORT_ERRORS=false &apos;/home/vision/Softwares/Anaconda3/bin/conda&apos; shell.bash hook 2&gt; /dev/null)&quot;if [ $? -eq 0 ]; then \eval &quot;$__conda_setup&quot; else if [ -f &quot;/home/vision/Softwares/Anaconda3/etc/profile.d/conda.sh&quot; ]; then . &quot;/home/vision/Softwares/Anaconda3/etc/profile.d/conda.sh&quot; CONDA_CHANGEPS1=false conda activate base else \export PATH=&quot;/home/vision/Softwares/Anaconda3/bin:$PATH&quot; fi fi unset __conda_setup # &lt;&lt;&lt; conda init &lt;&lt;&lt; 删掉后保存并关闭文件 在终端运行source ~/.bashrc python 版本 首先确定系统中是否存在python3.5版本，在终端运行 cd /usr/bin -&gt; ls，去查看是否存在python3.5 如果存在，尝试建立软连接操作如下 12sudo rm pythonsudo ln -s python3 python 查看python版本是否发生改变，命令行输入 python 下载caffe 命令行执行如下命令 12sudo apt-get install gitgit clone http://github.com/BVLC/caffe.git #关于libboost1.55 caffe想用python3.5，有libboost&gt;=1.5的要求，依次执行如下命令 12sudo apt-get install libboost1.55-dev #一定要安装的sudo apt-get install libboost1.55-all-dev #不一定要成功，但是一定要执行 各种python的依赖包 在网上大部分的教程中，这一不会提到执行for req in $(cat requirement.txt);do sudo pip3 install $req;done命令，但是这是针对python2.7的，按照这些教程编译一定会出现各种问题，所以我们要用 pip3 来执行，步骤如下： 首先安装 pip3 ，执行 sudo apt-get install python3-pip，安装成功后，再输入 pip3 --version 确认安装成功 进入 caffe/python (比如我的是在命令端输入 cd /home/jiyali/caffe/python) 执行 for req in $(cat requirements.txt);do sudo pip3 install $req;done 安装结束后退到caffe根目录，查看是否安装成功，执行 sudo pip3 install -r python/requirements.txt 如果其中发生任何错误，自行百度解决，我在安装过程中就出现了错误，后来好像是版本问题，因为过程之中没来得及记录，所以在这不再提啦~但是必须保证所有的包安装成功 numpy安装 执行 sudo apt-get install python-numpy protobuf安装 首先查看当前版本，执行 protoc --version ，如果显示是 3.x 版本应该是没问题，这里不建议版本太高 如果不存在，执行以下指令 123456789101112131415mkdir protobuf &amp;&amp; cd protobufmkdir cpp &amp;&amp; cd cppwget https://github.com/google/protobuf/releases/download/v3.0.0/protobuf-cpp-3.0.0.tar.gztar xvf protobuf-cpp-3.0.0.tar.gz &amp;&amp; cd protobuf-3.0.0./configure &amp;&amp; makemake checksudo make installsudo ldconfigcd ../..mkdir python &amp;&amp; cd pythonwget https://github.com/google/protobuf/releases/download/v3.0.0/protobuf-python-3.0.0.tar.gztar xvf protobuf-python-3.0.0.tar.gz &amp;&amp; cd protobuf-3.0.0/python/python setup.py buildpython setup.py testpython setup.py install 检查当前版本 protoc --version -&gt; sudo protoc --version ，普通用户和root账户最好版本相同 修改 Makefile.config 首先复制一个副本，执行 cp Makefile.config.example Makefile.config 执行 sudo gedit Makefile.config 查找numpy的安装目录，执行 pip show numpy 将8行改为 CPU_ONLY := 1 查找系统中的 boost_python ，在命令行输入 local boost python 将81.82行修改为 123PYTHON_LIBRARIES := boost_python-py35 python3.5mPYTHON_INCLUDE := /usr/include/python3.5m \ /home/jiyali/.local/lib/python3.5/site-packages/numpy/core/include #前半部分是numpy的安装路径 这些文件目录最好自己亲自检查是不是在这个文件夹下后再修改 将94行改为 WITH_PYTHON_LAYER := 1 将97.98行改为12INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial/LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib/x86_64-linux-gnu/hdf5/serial 编译caffe 如果是第一次编译caffe，没问题，按照下面步骤来就可以了 依次输入以下指令 12345sudo make cleansudo make allsudo make testsudo make runtestsudo make pycaffe 上面都编译通过后，再执行 sudo make pytest 中间出现的问题，因为我修改了超多所以我把能记得的有效的办法贴一下~ pycaffe添加环境变量 运行 vim ~/.bashrc 将 export PYTHONPATH=/home/wanghh/caffe/python:$PYTHONPATH 加到文件中，保存退出 运行 source ~/.bashrc ，使修改生效 编译中出现的问题解决 之间大部分错误是因为我没有使用 sudo ，这个具体怎么个情况我也不太清楚 错误(make:Nothing to be done for ‘pycaffe’)解决:执行 sudo make clean 中间编译的过程中出现了很多错误，一般都是 No Module Named:xxx，要么是模块没有安装，要么是安装了不支持Python3。解决：缺啥安啥，执行 sudo pip3 install XXX 错误： Makefile:554:recipe for target’.build_release/lib/libcaffe.so.1.0.0-rc3’failed解决： 修改 Makefile 文件 ，将181行改为 LIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_serial_hl hdf5_serial 错误：Makefile:546:recipe for target ‘pytest’ failedmake:***[pytest] Error 1 解决：运行 sudo pip3 install matplotlib --upgrade 参考：（ubuntu16.04）关于caffe+python3.5（非anaconda安装）编译的一些问题官方github中的issues]]></content>
  </entry>
  <entry>
    <title><![CDATA[win10安装cafffe血泪全过程]]></title>
    <url>%2F2019%2F04%2F16%2Fwin10%E5%AE%89%E8%A3%85cafffe%E5%85%A8%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[系统配置12345win10+64位Visual Studio2015python v3.5.2Anaconda3-2019.03-Windows-x86_64cmake version 3.14.2 软件准备Visual Studio2015下载 贴一个Visual Studio官方下载地址，或者直接点击百度网盘下载，提取码：z4u6 安装 VS2015 下载完成后会得到一个镜像文件(.iso 文件)，双击打开，运行 vs_professional.exe 进入安装程序。 选择安装位置以及安装方式安装位置可以自己选择，但是安装方式需要选择 自定义点击 下一步 选择要安装的组件配置caffe的时候需要用到 vcvarsall.bat 文件，所以我们需要选择安装 Visual C++(后期我debug的时候又补充安装了下面的 针对Visual Studio 的 Python 工具(2017年1月) 不知道是否有用，大家还是勾选吧) 剩下的就一路默认就可以啦，等待安装完成 安装完成后点击 启动 点击 以后再说 选择主题后，点击 启动Visual Studio激活 点击菜单栏的 帮助 ，点击 注册产品 点击 使用产品密钥解锁 复制下列激活码：(网上找的)后，点击 应用 1KEY：HMGNV-WCYXV-X7G9W-YCX63-B98R2 注册成功 python3.5下载 附一python官网(https://www.python.org/)，打开后选择 Downloads ，选择合适系统，比如 Windows 选择要下载的python版本，点击进入下拉找到 Files 选择合适系统的安装包，点击下载 安装 双击打开下载好的安装包 python-3.5.2-amd64.exe ，选择 Customize installation ，勾选 Add Python 3.5 to PATH ，下一步 默认不作更改，下一步 在 Customize install location 自定义选择安装路径后，点 install 等待安装完成 anaconda下载 贴anaconda官网(https://www.anaconda.com/)，点击右上角的 Download 下拉选择 Windows ，继续选择 Python3.7 version ，选择核实系统的安装包进行下载，比如我的电脑是64位系统，选择 64-Bit Graphical Installer (662 MB) 安装 双击下载好的安装包 Anaconda3-2019.03-Windows-x86_64.exe ，点击 next 点击 I Agree ，下一步 选择 All Users ，下一步 自定义安装位置 勾选环境变量 等待安装完成即可 配置pyhton3.5环境我们下载好的anaconda默认是python3.7环境的，现在我们需要更改一下python3.5的环境 打开 开始 菜单 -&gt; 找到 Anaconda Powershell Prompt -&gt; 输入命令 conda create --name py35 python=3.5 安装中间会出现 Proceed([y]/n)? -&gt; 输入 y -&gt; 回车 完成安装 cmake下载 贴cmake官网(https://cmake.org/download/) 选择合适版本的安装包进行下载，比如说我下载的是 cmake-3.14.2-win64-x64.zip 安装 找一合适的文件夹解压 cmake-3.14.2-win64-x64.zip 打开解压后的文件夹 cmake-3.14.2-win64-x64 -&gt; bin 复制文件地址，比如我的是 F:\Program Files\cmake-3.14.2-win64-x64\bin 将上述地址添加到环境变量 同时按 WIN + R 键，打开 运行 对话框，输入 sysdm.cpl ，按回车键打开 系统属性 在系统属性对话框中选择 高级 选项卡 选择 Path ，点击 编辑 选择 新建 ，将刚才复制过的地址复制过来就可以啦 记得全部点保存后再退出 打开cmd，输入 cmake --version ，得到 cmake version 3.14.2 后，说明安装成功~ caffe的部分依赖包下载 暂时我就只能贴一百度云下载链接啦，提取码：43mq 使用 在C盘目录下打开 用户 -&gt; 打开 Administrator -&gt; 打开cmd，输入mkdir .caffe 创建一个名为 .caffe 的文件 -&gt; 打开 .caffe 后，新建文件夹 dependencies -&gt; 打开后，新建文件夹 download 将上面下载的 libraries_v140_x64_py35_1.1.0.tar 文件拷贝到刚才新建的文件夹 C:\Users\Administrator\.caffe\dependencies\download 下面 caffe-windows下载 贴上caffe官方github(https://github.com/BVLC/caffe/tree/windows)，可以直接下载 或者在想要安装的文件夹下，右键 Git Bash Here -&gt; 依次输入： 123git clone https://github.com/BVLC/caffe.gitcd caffegit checkout windows 配置 修改 build_win.cmd 打开 caffe -&gt; scripts -&gt; 用notepad++ 打开 build_win.cmd 修改如下内容1234MSVC_VERSION=14 //选用VS2015编译WITH_NINJA=0 //不用NinjaCPU_ONLY=1 //用cuda加速就设置为0，不用就设置为1 PYTHON_VERSION=3 //我用的是python3.5，所以设置为3 注：以上修改内容最好使用 搜索 ，将文件中全部上述内容的进行修改，我之前安装失败就是因为修改时只改了一部分，没有修改全部(不出问题是有两处)( 另外我还改了另一个地方，搜索 set CONDA_ROOT ，将 = 后面改为 Anaconda3 的地址，比如说我的是 F:\ProgramData\Anaconda3 ，这个部分我不确定是不是必须要改，网上说法不一，反正我改掉啦~ ) 修改 WindowsDownloadPrebuiltDependencies.cmake 打开 caffe -&gt; cmake -&gt; 用notepad++ 打开 WindowsDownloadPrebuiltDependencies.cmake 搜索 if(NOT DEFINED DEPENDENCIES_URL_${MSVC_VERSION}_${_pyver}) 在 if(NOT DEFINED DEPENDENCIES_URL_${MSVC_VERSION}_${_pyver}) 上面加一行代码： 1set(MSVC_VERSION 1900) 保存退出 编译 切换环境切记切记！！一定要在编译前切换python的环境！！！打开 cmd -&gt; 输入 activate py35 -&gt; 输入 f -&gt; 输入 cd F:\caffe\scripts 进入正题输入 build_win.cmd 长篇大论之后，大概会出现下面的界面(这一部分我最终的结果和网上不一样，不知道是否编译成功) 曾出现的Bug记录 应该是我太菜鸡，安装过程中Bug层出不穷，前面基本上已经把我之前失误的地方都改过了，我就再说一个比较顽固的bug吧 之前出现 The dependency target &quot;pycaffe&quot; of target &quot;pytest&quot; does not exist 时，搜索了很多类似的问题都没啥解决办法。后来发现可能是环境有问题，环境中没有安装 numpy所以为了避免这个问题出现，我们可以在编译之前， cmd 中输入 python ，加载成功之后 输入 import numpy ，出现下面的界面时，说明我们的环境中有 numpy ，不会出现上述问题 切记，不论出现任何问题，都要把 :\caffe\scripts 目录下的 build 文件彻底删掉才能进行下一轮编译]]></content>
  </entry>
  <entry>
    <title><![CDATA[hexo+next 部署各种炫酷博客特效]]></title>
    <url>%2F2019%2F04%2F15%2Fhexo-next-%E9%83%A8%E7%BD%B2%E5%90%84%E7%A7%8D%E7%82%AB%E9%85%B7%E5%8D%9A%E5%AE%A2%E7%89%B9%E6%95%88%2F</url>
    <content type="text"><![CDATA[在右上角或者左上角实现fork me on github效果图： 实现方法：戳这个链接或这个链接，选择喜欢的图标样式，并复制代码，下面图片红框中右侧的代码： 打开博客主目录文件 -&gt; themes -&gt; next -&gt; layout -&gt; _layout.swig -&gt; 搜索 class=&quot;headband&quot; -&gt; 将刚才复制的代码粘贴在下面 -&gt; 并把 href 改为你的github地址 添加RSS效果图： 实现方法：找到博客主目录文件 -&gt; 右键 Git Bash Here -&gt; 执行 npm install --save hexo-generator-feed -&gt; 安装结束后，打开博客主目录文件 -&gt; 打开 _config.yml -&gt; 在末尾添加代码：123# Extensions## Plugins: http://hexo.io/plugins/plugins: hexo-generate-feed 再打开 themes -&gt; next -&gt; _config.yml -&gt; 搜索 rss -&gt; 在 rss: 后面添加 /atom.xml，,注意在冒号后面要加一个空格 侧边栏社交小图标设置效果图： 实现：打开博客主目录文件 -&gt; themes -&gt; next -&gt; _config.yml -&gt; 搜索 social -&gt; 删掉想要展示的社交账号前面的 # 号，将地址改为自己的地址 -&gt; 找到下面的 social_icons: -&gt; 将 enable 设置为 true -&gt; 在图标库找自己喜欢的小图标，并将名字复制在如下位置，保存即可 主页文章添加阴影效果效果图： 实现：打开博客主目录文件 -&gt; themes -&gt; next -&gt; source -&gt; css -&gt; _custom -&gt; custom.styl -&gt; 在里面粘贴如下代码：1234567.post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125; 页面底部跳动的爱心效果图： 实现： 首先找到图标库，如我现在选择下图中的爱心，那么我要复制的内容就是下图红框中的 fa-heartbeat。打开博客主目录文件 -&gt; themes -&gt; next -&gt; _config.yml -&gt; 搜索 footer -&gt; 将 name 后面的 user 替换成 fa-heartbeat -&gt; 将 animated 设置成 true -&gt; 将 color 修改为 #ff0000 页面访问量统计实现：打开博客主目录文件 -&gt; themes -&gt; next -&gt; _config.yml -&gt; 搜索 busuanzi_count -&gt; 将 enable 设置为 true 添加顶部加载条实现：打开博客主目录文件 -&gt; themes -&gt; next -&gt; layout -&gt; _partials -&gt; head -&gt; head.swig -&gt; 在第四行后面添加如下代码：12&lt;script src=&quot;//cdn.bootcss.com/pace/1.0.2/pace.min.js&quot;&gt;&lt;/script&gt;&lt;link href=&quot;//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css&quot; rel=&quot;stylesheet&quot;&gt; 打开博客主目录文件 -&gt; themes -&gt; next -&gt; _config.yml -&gt; 搜索 pace -&gt; 将 pace 设置为 true默认的颜色是粉红色的。 隐藏网页底部powered By Hexo / 强力驱动实现：打开博客主目录文件 -&gt; themes -&gt; next -&gt; layout -&gt; _partials -&gt; footer.swig -&gt; 搜索 class=&quot;powered-by&quot; -&gt; 使用 &lt;!-- --&gt; 隐藏下图所示代码 为博客添加萌宠效果图： 实现：先给出hexo-helper-live2d 的 Github 链接：https://github.com/EYHN/hexo-helper-live2d 安装并配置 hexo-helper-live2d安装 hexo-helper-live2d 找到博客主目录文件 -&gt; 右键 Git Bash Here -&gt; 执行 npm install hexo-helper-live2d --save 配置 hexo-helper-live2d挑选萌物 到插件作者博客挑选你喜欢的萌物，记录下她的名字~ 安装萌物 比如说我喜欢 koharu，安装 koharu的步骤： 找到博客主目录文件 -&gt; 右键 Git Bash Here -&gt; 执行 npm install live2d-widget-model-koharu --save 配置萌物 打开博客主目录文件 -&gt; _config.yml -&gt; 添加如下代码： 123456789101112131415161718# Live2D## https://github.com/EYHN/hexo-helper-live2dlive2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false debug: false model: use: live2d-widget-model-koharu display: position: right width: 150 height: 300 mobile: show: true 执行 hexo clean -&gt; hexo g -&gt; hexo s ，就能看见我们的萌宠啦~ 浏览页面的时候显示当前浏览进度效果： 实现：打开博客主目录文件 -&gt; themes -&gt; next -&gt; _config.yml -&gt; 搜索 scrollpercent -&gt; 将 scrollpercent 设置为 true 参考：用Live2D让看板喵入住你的Hexo博客吧(^o^)/~hexo的next主题个性化教程:打造炫酷网站]]></content>
  </entry>
  <entry>
    <title><![CDATA[使用VSCode写博客ヾ(◍°∇°◍)ﾉﾞ]]></title>
    <url>%2F2019%2F04%2F14%2F%E4%BD%BF%E7%94%A8VSCode%E5%86%99%E5%8D%9A%E5%AE%A2%E3%83%BE-%E2%97%8D%C2%B0%E2%88%87%C2%B0%E2%97%8D-%EF%BE%89%EF%BE%9E%2F</url>
    <content type="text"><![CDATA[安装VSCode和markdownlint安装VSCode 先贴一Visual Studio Code官网(https://code.visualstudio.com/) 打开是如下界面 点击红框下面的下拉箭头，选择适合系统的安装文件，点击下载，下载完成后运行 VSCodeUserSetup-x64-1.33.1.exe 如果没有什么特殊要求就一路默认安装即可。 安装markdownlint 打开VSCode，在下图所示位置输入 markdownlint 点击进入，出现下述界面 点击红框中的 install 安装结束~ 撰写新的文章新建一篇文章找到博客主目录文件，右键选择 Git Bash Here，输入如下命令1hexo new post &quot;文章的名字&quot; 找到文章路径打开 博客主目录文件 -&gt; source -&gt; _posts -&gt; 你文章的名字右键选择 打开方式 ，选择 Visual Studio Code ，打开页面如下： markdown 的基本语法markdown 的语法大部分都非常简单，一般来说，稍微看一看都能迅速写出文章。吹爆！至于绘制公式等复杂的用法，以后用到会来更新~ 标题语法标题语法是这样的： 第一级标题，开头是一个# 第二级标题，开头是两个## 第三级标题，开头是两个### …… 请注意，标题需要独自占据一行，并且在标题的文字和 # 之间需要有一个空格，不然可能会不被识别。同时，markdown只支持六级标题，六级以上的标题不存在鸭~ 12345678910# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题####### h7 // 错误代码######## h8 // 错误代码######### h9 // 错误代码########## h10 // 错误代码 字体语法加粗 要加粗的文字左右分别用两个*号包起来 比如： 1**加粗以后我就是最靓的仔** 效果： 加粗以后我就是最靓的仔 斜体 要倾斜的文字左右分别用一个*号包起来 比如： 1*整条街就我最横* 效果： 整条街就我最横 斜体加粗 要倾斜和加粗的文字左右分别用三个*号包起来 比如： 1***我又靓又横我最牛批*** 效果： 我又靓又横我最牛批 删除线 要加删除线的文字左右分别用两个~~号包起来 比如： 1~~WTF!当我没说这句话~~ 效果： WTF!当我没说这句话 引用语法引用需要的一个特殊符号是 &gt;，使用方法依旧很简单，只需要在引用的行首加上 &gt; 就可以啦！多行引用就在连续的每一行之前都加上 &gt; 比如说123&gt; 爱的魔力转圈圈，想你想到心花怒放黑夜白天&gt; 可是我害怕爱情只是一瞬间，转眼会不见 &gt; 我要慢慢冒险 上面的markdown效果就是: 爱的魔力转圈圈，想你想到心花怒放黑夜白天可是我害怕爱情只是一瞬间，转眼会不见我要慢慢冒险 代码标记语法感觉会来捣腾这样一个博客的，基本都会和程序员搭上点边？？？那么，在自己的文章中把代码高亮出来的这种操作一定也是非常常用啦！在这里，和大家分享三种标记代码的方式：行内代码标记高亮代码块标记。 行内代码标记行内的标记语法 需要通过两个 ` 把需要被标记的内容包起来，注意，这个符号就是键盘上在数字 1 左边的那个符号。 比如： 1爱的魔力转圈圈 `爱的魔力转圈圈` 爱的魔力转圈圈 效果：爱的魔力转圈圈 爱的魔力转圈圈 爱的魔力转圈圈 高亮代码块这种代码标记的方式可以显示行号，并且可以根据你指定的代码语言对代码进行高亮。为了使用这种标记方式，我们需要在代码块的上方和下方各添加一个以三个反引号开头的行，这个符号也是键盘上数字 1 左侧的符号。在开头行的三个反引号后写上代码所使用的语言即可对代码块进行语法高亮(彩色)。不加的话显示为黑白效果。 比如 12345678这里有三个反引号Javavar executeSync = function()&#123; var args = Array.prototype.slice.call(arguments); if (typeof args[0] === &apos;function&apos;)&#123; args[0].apply(null, args.splice(1)); &#125;&#125;;这里有三个反引号 效果： 123456var executeSync = function()&#123; var args = Array.prototype.slice.call(arguments); if (typeof args[0] === 'function')&#123; args[0].apply(null, args.splice(1)); &#125;&#125;; 列表语法在我们需要按条列举一些内容时，我们可以使用两种方式来展示。 第一种是直接使用 [数字].[空格][内容] 的方式实现 比如： 12341. 爱的魔力转圈圈2. 想你想到心花怒放黑夜白天3. 可是我害怕爱情只是一瞬间4. 转眼会不见，我要慢慢冒险 效果： 爱的魔力转圈圈 想你想到心花怒放黑夜白天 可是我害怕爱情只是一瞬间 转眼会不见，我要慢慢冒险 第二种是用 * 代替数字，使用 [*][空格][内容]的方式实现 比如： 1234* 爱的魔力转圈圈* 想你想到心花怒放黑夜白天* 可是我害怕爱情只是一瞬间* 转眼会不见，我要慢慢冒险 效果： 爱的魔力转圈圈 想你想到心花怒放黑夜白天 可是我害怕爱情只是一瞬间 转眼会不见，我要慢慢冒险 链接语法生成链接的markdown语法有两种，一种是内联式，一种是引用式。 内联式内联式的链接由连续的一对中括号和一对小括号组成，中括号里的内容是链接显示出来的文字，小括号里的内容是链接的地址，写法为 [你想要展示给大家的链接的名称](链接地址) 比如: 1[这是一个小仙女的碎碎念博客](https://jiyali.github.io/) 效果：这是一个小仙女的碎碎念博客 此外，如果想要跳转到同一页面的某个标题处，只需要将链接的位置的内容修改为井号并加上标题名称即可，写法为：[你想要的展示给大家的链接的名称](#本页面的标题名称) 比如： 1[我来教大家怎么写标题~](#标题语法) 效果：我来教大家怎么写标题~点击上面的链接就调到了标题语法的章节，有木有很方便~ 引用式写论文的时候会用到各种引用，在markdown中也有非常方便的引用式的链接，写法为：[空格][你想要展示给大家的链接名称][链接的标号][空格]，然后在任意位置写引用标签，写法为：[刚才的链接的标号]：链接地址。 比如： 12在这里我们将要引用一篇论文，论文题目为 [《Show and Tell: A Neural Image Caption Generator》][1] [1]:https://arxiv.org/pdf/1411.4555.pdf 效果：在这里我们将要引用一篇论文，论文题目为 《Show and Tell: A Neural Image Caption Generator》 插入图片语法配置文件打开博客主目录文件 -&gt; _config.yml -&gt; 搜索post_asset_folder 选项 -&gt; 设置为 true 安装图片插件找到博客主目录文件 -&gt; 右键 Git Bash Here -&gt; 执行 npm install hexo-asset-image --save -&gt; 等待安装完成 生成新的博文找到博客主目录文件 -&gt; 右键 Git Bash Here -&gt; 执行 hexo new post &#39;文章题目&#39; ，就可以看到/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹，而我们文章中需要引用的图片会放在这个文件夹下面~ 语法向文中插入图片的方式和链接是十分类似的，只需要在链接语法前加上一个 ! 即可，其中，中括号中的内容是鼠标移到图片上时显示的描述。写法： ![你想要展示给大家的图片的名称](保存时图片的名称比如&#39;hhh.png&#39;) 比如：1![老哥这波稳](timg.jpg) 效果： 酱~然后就是hexo三联，提交就能看见我们的博客啦:hexo cleanhexo ghexo s是不是不那么乱七八糟啦~基本上实现小学生水平的图文并茂~ 参考：学会写作和你的Hexo博客一起愉快地玩耍吧hexo生成博文插入图片markdown作者的英文文档附带markdown作者的中文文档学会看技术文档是个好习惯！(ง •_•)ง]]></content>
  </entry>
  <entry>
    <title><![CDATA[使用Valine.js添加留言板功能]]></title>
    <url>%2F2019%2F04%2F14%2F%E4%BD%BF%E7%94%A8Valine-js%E6%B7%BB%E5%8A%A0%E7%95%99%E8%A8%80%E6%9D%BF%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[本文配置Valine 是基于Next主题的，相对来说更简单一些，如果不是使用Next主题，这里提供Valine官方文档给大家参阅。 LeanCloud 基本应用创建先来一条官网链接LeanCloud(https://leancloud.cn/) 注册LeanCloudLeanCloud注册链接注册结束，登录 创建应用登陆之后会出现下图所示的一个界面，点击红框中的创建应用然后在弹出框中随意填写一个名字，使用免费的开发版即可~创建结束后出现如下所示界面 获取应用Key点击上图的这个窗口进入应用界面。点击左侧的”设置”和中间的”应用Key”保存最右侧的App ID和App Key，将其复制下来以供接下来的配置使用。 配置安全域名现在这个状态，任何人都可以访问我们的资源，这样就有可能会导致资源的泄露，所以我们需要配置安全域名，只有在白名单中的域名才可以使用我们的资源。仍然是在刚才的设置页面，点击当中红框的“安全中心”，在最右侧红框“Web 安全域名”中根据提示填写我们站点的域名后点击保存即可。 配置 Next 主题中的 Valine 评论功能将评论功能添加到博客中打开博客主目录文件-&gt; themes 文件夹-&gt; next -&gt; _config.yml打开 _config.yml 文件后搜索 # Valine 字段，我们可以看到如下内容：12345678910111213# Valine.# You can get your appid and appkey from https://leancloud.cn# more info please open https://valine.js.orgvaline: enable: false # When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version. appid: # your leancloud application appid appkey: # your leancloud application appkey notify: flase # mail notifier, See: https://github.com/xCss/Valine/wiki verify: flase # Verification code placeholder: Just go go # comment box placeholder avatar: mm # gravatar style guest_info: nick,mail,link # custom comment header pageSize: 10 # pagination size 我们将刚刚获得的 App ID 和 App Key 分别填写到 appid 和 appkey 这两个字段的冒号后面。并且将 enable 修改为 true 。 刷新博客的文章页面，评论功能就出现啦~ 参考链接：使用Valine.js评论系统让游客们到你的Hexo博客留个脚印吧]]></content>
  </entry>
  <entry>
    <title><![CDATA[使用Github+hexo+next搭建个人博客的全过程]]></title>
    <url>%2F2019%2F04%2F14%2F%E4%BD%BF%E7%94%A8Github-hexo-next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%85%A8%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[搭建过程本次搭建Hexo使用的本地环境如下： Windows 10 node v10.15.3 -x64 git version2.20.1.windows.1 hexo v3.8.0 next v6.0.0 准备软件的安装Node.js 打开Node.js官网(http://nodejs.org)，我们就能看见如下的安装界面： 点击左面的按钮(10.15.3LTS)，下载 node-v10.15.3-x64.msi 安装文件。 下载完成后，打开 node-v10.15.3-x64.msi 进行安装。 除非你要修改安装路径或者有什么特殊的需求，否则一路默认安装即可。 安装完成后，打开cmd，输入 node -v ，若为以下类似的输出，则安装成功。 12C:\Users\Administrator&gt;node -vv10.15.3 Git 打开Git官网(https://git-scm.com/downloads)，我们就能看见如下安装界面： 选择适用系统(比如windows)，点击进入后 选择图中红框内的链接，下载 Git-2.21.0-64-bit.exe 安装文件。 下载完成后，打开 Git-2.21.0-64-bit.exe 进行安装。 安装完成后，打开cmd，输入 git --version ，若为以下类似的输出，则安装成功。 12C:\Users\Administrator&gt;git --versiongit version 2.20.1.windows.1 github注册 点击github官网(https://github.com/) 这里的 Username 慎重考虑喔！因为个人网站的固定格式就是：username.github.io 创建Repository 登录github之后，点击右上角的 + 号，选择New repository 创建一个与你的博客相关的Repository项目进行管理，之后所有你博客的动态都会在这Repository更新。Repository的名字是username.github.io，比如我的JiYali.github.io已经创建。其余可以先不填，点击Create repository 配置和使用github 开始—所有应用—找到git bash 配置SSH Keys SSH Keys用来使本地git项目与GitHub联系，这样能在GitHub上的博客项目是最新更新的。 检查SSH Key的设置首先检查自己电脑上现有的SSH Key: 1cd ~/.ssh 如果显示下图信息，则说明这是你第一次使用git 生成新的SSH Key: 123ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot;Generating public/private rsa key pair.Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt; 这里的邮箱地址，输入注册github的邮箱地址然后系统会要你输入密码 12Enter passphrase (empty for no passphrase):&lt;设置密码&gt;Enter same passphrase again:&lt;再次输入密码&gt; 再回车，这里会提示你输入一个密码，作为你提交项目时使用。这个密码的作用就是在个人网站里所有的改动只能经过你的手，也可以不设置密码，直接为空。注意：输入密码的时候没有输入痕迹的，不要以为什么也没有输入。最后看到类似于这样的界面，就成功设置ssh key了： 添加SSH Key到github上在本地文件夹找到id_rsa.pub文件。看上面图片中的第四行的位置就告诉你保存在哪里了。默认为C:\Users\Administrator\.ssh。没找到的话勾选一下文 件扩展名和隐藏的项目。.ssh文件夹里记事本打开这个文件复制全部内容到github相应位置回到你的GitHub主页，右上角点击头像选中Setting继续选中左边菜单栏的SSH and GPG keysTitle最好写，随便写。网上有说不写title也有可能后期出现乱七八糟的错误Key部分就是放刚才复制的内容了，点击Add SSH key 测试回到git bash 框里输入以下代码，不要改任何一个字！！！ 1$ ssh -T git@github.com 回车，看到如下： 123The authenticity of host &apos;github.com (52.74.223.119)&apos; can&apos;t be established.RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.Are you sure you want to continue connecting (yes/no)? 输入yes回车 1Enter passphrase for key &apos;/c/Users/Administrator/.ssh/id_rsa&apos;: 输入刚才设置的密码回车，看到“You’ve successfully authenticated…”成功！下一步！ 输入用户信息现在已经成功通过SSH链接到github啦，我们需要完善一下个人信息： 12$ git config --global user.name &quot;username&quot; //输入注册时的username$ git config --global user.email &quot;注册的邮箱地址&quot; //填写注册邮箱 到此，SSH Key配置结束啦！你的电脑已成功连接到 github。 Hexo开始菜单中打开git bash，利用npm命令安装hexo1npm install -g hexo 请耐心稍等一会儿，如果在安装过程中头部出现 WARN ，可能是因为某些内容不支持 Windows，请不要担心，并不影响实际使用。 (在我写教程的时候安装hexo死活就是出错，尝试了npm config set registry https://registry.npm.taobao.org再输入npm install -g hexo后才安装正常，可以做个小参考，如果没用，请自行百度解决~) 在安装完成后，输入hexo -v，若出现类似以下内容，则 Hexo 已经安装成功。12345678910111213141516hexo-cli: 1.1.0os: Windows_NT 10.0.17763 win32 x64http_parser: 2.8.0node: 10.15.3v8: 6.8.275.32-node.51uv: 1.23.2zlib: 1.2.11ares: 1.15.0modules: 64nghttp2: 1.34.0napi: 3openssl: 1.1.0jicu: 62.1unicode: 11.0cldr: 33.1tz: 2018e 搭建hexo博客创建博客主目录在本地创建一个与 Repository中博客项目同名的文件夹username.github.io(如D:/JiYali.github.io) 初始化hexo主目录在文件夹上点击鼠标右键，选择 Git bash here，输入如下命令：1$ hexo init 安装依赖包 1$ npm install 确保git部署 1$ npm install hexo-deployer-git --save 本地查看 12$ hexo g$ hexo s 打开浏览器，在地址输入http://localhost:4000 ，我们就可以看到激动人心的界面啦！至此hexo博客就真的已经简！单！的！搭！建！完！成！了！✿✿ヽ(°▽°)ノ✿ 使用next主题我想说next这个主题真的是超简单方面，之前尝试了几个主题配置方面都是贼麻烦，所以最终还是随大流选择了next，emmmm..完全是发现了新！大！陆！(✪ω✪) 克隆主题在博客主目录文件上点击鼠标右键，选择 Git bash here，输入如下命令：1$ git clone https://github.com/theme-next/hexo-theme-next themes/next 启用next主题我们在博客主目录文件夹下可以看到有一个名为 _config.yml 的配置文件，我们用编辑器打开它，搜索 theme，我们可以找到以下内容：1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: landscape 我们要将其中的 landscape 修改为我们要是用的 next，修改完如下所示：1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next 查看已启用的主题我们在 Git Bash 依次输入下方三条命令：123$ hexo clean$ hexo g$ hexo s 就可以看到如下界面啦 将博客部署到uesrname.github.io复制SSH码进入 Github 个人主页中的 Repository，复制新建的独立博客项目username.github.io的 SSH码 编辑整站配置文件打开博客主目录文件夹下的 _config.yml ，用编辑器打开它，搜索 deploy，把刚刚复制的 SSH码粘贴到repository：后面，别忘了冒号后要空一格。1234deploy: type: git repository: git@github.com:jiyali/JiYali.github.io.git branch: master 执行下列指令即可完成部署Git Bash 依次输入下方命令：1234$ hexo clean$ hexo g$ hexo s$ hexo d 【提示】如果在配置 SSH key 时设置了密码，执行 hexo d 命令上传文件时需要输入密码进行确认输入密码之后在浏览器输入：username.github.ioSurprise🎉！恭喜你~现在你已经拥有自己的一个小空间啦~ 参考链接:如何搭建自己的个人网站（上）基于Hexo+Coding+Github搭建个人博客的全过程 我的文章将持续更新在我的 https://jiyali.github.io/ 里任何疑问请在下方留言，也将在下一期教如何制作留言板和写博客等内容~敬请期待~❤]]></content>
  </entry>
</search>
